// @ts-nocheck
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async meta() : Promise<Result<InitData, TauriError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("meta") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async init() : Promise<Result<null, TauriError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("init") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async setWindow(theme: Theme, windowEffect: WindowEffect) : Promise<Result<[boolean, string | null], TauriError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("set_window", { theme, windowEffect }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async configWrite(settings: Partial<{ [key in string]: JsonValue }>) : Promise<Result<null, TauriError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("config_write", { settings }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async openCache(key: CacheKey) : Promise<Result<null, TauriError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("open_cache", { key }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getSize(key: CacheKey, event: TAURI_CHANNEL<number>) : Promise<Result<null, TauriError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_size", { key, event }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async cleanCache(key: CacheKey) : Promise<Result<null, TauriError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("clean_cache", { key }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async dbImport(input: string) : Promise<Result<null, TauriError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("db_import", { input }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async dbExport(output: string) : Promise<Result<null, TauriError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("db_export", { output }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async stopLogin() : Promise<void> {
    await TAURI_INVOKE("stop_login");
},
async exit() : Promise<Result<number, TauriError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("exit") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async smsLogin(cid: number, tel: string, code: string, captchaKey: string) : Promise<Result<number, TauriError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("sms_login", { cid, tel, code, captchaKey }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async pwdLogin(username: string, encodedPwd: string, token: string, challenge: string, validate: string, seccode: string) : Promise<Result<number, TauriError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("pwd_login", { username, encodedPwd, token, challenge, validate, seccode }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async switchCookie(switchCode: string) : Promise<Result<number, TauriError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("switch_cookie", { switchCode }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async scanLogin(qrcodeKey: string, event: TAURI_CHANNEL<number>) : Promise<Result<number, TauriError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("scan_login", { qrcodeKey, event }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async refreshCookie(refreshCsrf: string) : Promise<Result<number, TauriError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("refresh_cookie", { refreshCsrf }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async submitTask(task: Task) : Promise<Result<null, TauriError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("submit_task", { task }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async processQueue(sid: string, folder: string) : Promise<Result<null, TauriError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("process_queue", { sid, folder }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async openFolder(sid: string, id: string | null) : Promise<Result<null, TauriError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("open_folder", { sid, id }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async ctrlEvent(event: CtrlEvent, sid: string, list: string[]) : Promise<Result<null, TauriError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("ctrl_event", { event, sid, list }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async updateMaxConc(newConc: number) : Promise<Result<null, TauriError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("update_max_conc", { newConc }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async updateSelect(id: string, select: PopupSelect) : Promise<Result<null, TauriError>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("update_select", { id, select }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}

/** user-defined events **/


export const events = __makeEvents__<{
headersData: HeadersData,
processError: ProcessError,
queueEvent: QueueEvent
}>({
headersData: "headers-data",
processError: "process-error",
queueEvent: "queue-event"
})

/** user-defined constants **/



/** user-defined types **/

export type AnyInt = number
export type CacheKey = "log" | "temp" | "webview" | "database"
export type CtrlEvent = "pause" | "resume" | "cancel"
export type HeadersData = { Cookie: string; "User-Agent": string; Referer: string; Origin: string }
export type InitData = { version: string; hash: string; config: Settings }
export type JsonValue = null | boolean | number | string | JsonValue[] | Partial<{ [key in string]: JsonValue }>
export type MediaItem = { title: string; cover: string; desc: string; duration: number; pubtime: number; type: string; aid?: number | null; sid?: number | null; fid?: number | null; cid?: number | null; bvid?: string | null; epid?: number | null; ssid?: number | null; index: number }
export type MediaNfo = { tags: string[]; thumbs: MediaNfoThumb[]; showtitle: string; premiered: number; upper: MediaNfoUpper | null; actors: MediaNfoActor[]; staff: string[] }
export type MediaNfoActor = { role: string; name: string }
export type MediaNfoThumb = { id: string; url: string }
export type MediaNfoUpper = { name: string; mid: number; avatar: string }
export type PopupSelect = { res?: number | null; abr?: number | null; enc?: number | null; fmt: StreamFormat; misc: PopupSelectMisc; nfo: PopupSelectNfo; danmaku: PopupSelectDanmaku; thumb: string[]; media: PopupSelectMedia }
export type PopupSelectDanmaku = { live: boolean; history: StringOrFalse }
export type PopupSelectMedia = { video: boolean; audio: boolean; audioVideo: boolean }
export type PopupSelectMisc = { aiSummary: boolean; subtitles: StringOrFalse }
export type PopupSelectNfo = { album: boolean; single: boolean }
export type ProcessError = { name: string; error: string }
export type QueueData = { waiting: string[]; doing: string[]; complete: string[] }
export type QueueEvent = { type: "snapshot"; init: boolean; queue: QueueData; tasks?: Partial<{ [key in string]: Task }> | null; schedulers?: Partial<{ [key in string]: SchedulerView }> | null } | { type: "state"; parent: string; state: TaskState } | { type: "progress"; parent: string; id: string; status: SubTaskStatus } | { type: "request"; parent: string; subtask: string | null; action: RequestAction } | { type: "error"; parent: string; id?: string | null; message: string; code: number | null }
export type RequestAction = "refreshNfo" | "refreshUrls" | "refreshFolder" | "getFilename" | "getNfo" | "getThumbs" | "getDanmaku" | "getSubtitle" | "getAISummary"
export type SchedulerView = { sid: string; ts: number; list: string[] }
export type Settings = { add_metadata: boolean; auto_check_update: boolean; auto_download: boolean; auto_startup: boolean; block_pcdn: boolean; check_update: boolean; clipboard: boolean; convert: SettingsConvert; default: SettingsDefault; down_dir: string; format: SettingsFormat; language: string; max_conc: number; notify: boolean; temp_dir: string; theme: Theme; window_effect: WindowEffect; organize: SettingsOrganize; proxy: SettingsProxy }
export type SettingsConvert = { danmaku: boolean; mp3: boolean }
export type SettingsDefault = { res: number; abr: number; enc: number }
export type SettingsFormat = { series: string; item: string; file: string }
export type SettingsOrganize = { auto_rename: boolean; top_folder: boolean; sub_folder: boolean }
export type SettingsProxy = { address: string; username: string; password: string }
export type StreamFormat = "dash" | "mp4" | "flv"
export type StringOrFalse = string | boolean
export type SubTask = { id: string; type: TaskType }
export type SubTaskStatus = { chunk: number; content: number }
export type Task = { id: string; state: TaskState; subtasks: SubTask[]; status: Partial<{ [key in string]: SubTaskStatus }>; ts: number; seq: number; folder: string; select: PopupSelect; item: MediaItem; type: string; nfo: MediaNfo }
export type TaskState = "pending" | "active" | "completed" | "paused" | "failed" | "cancelled"
export type TaskType = "aiSummary" | "subtitles" | "albumNfo" | "singleNfo" | "liveDanmaku" | "historyDanmaku" | "thumb" | "video" | "audio" | "audioVideo"
export type TauriError = { code: AnyInt | null; message: string }
export type Theme = 
/**
 * Light theme.
 */
"light" | 
/**
 * Dark theme.
 */
"dark" | 
/**
 * Auto theme.
 */
"auto"
export type WindowEffect = 
/**
 * Auto window effect based on platform
 */
"auto" | 
/**
 * Mica effect (Windows 11+)
 */
"mica" | 
/**
 * Acrylic effect (Windows 10+)
 */
"acrylic" | 
/**
 * Sidebar effect (macOS)
 */
"sidebar" | 
/**
 * No window effect
 */
"none"

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
